const fs = require('fs')
const PROJECT_ENV = process.env.PROJECT_ENV || 'production'

// cordova-hcp.json 文件
const getCordovaHcpJson = function (appConfig) {
  return JSON.stringify({
    "name": appConfig.name,
    "autogenerated": true,
    "ios_identifier": '',
    "android_identifier": `${appConfig.url}app/app.apk`,
    "update": 'now',
    "min_native_interface": appConfig.native_interface,
    "content_url": appConfig.url
  }, '', '  ')
}

// config.xml 文件
const getConfigXML = function (appConfig) {
  return `<?xml version='1.0' encoding='utf-8'?>
  <widget id="${appConfig.id}" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0" xmlns:android="http://schemas.android.com/apk/res/android">
    <name>${appConfig.nameCN}</name>
    <description>嘉德永丰App</description>
    <author email="flicat.li@qq.com">Flicat.li</author>
    <icon src="public/icon.png" />
    <splash density="port-hdpi" src="public/splash-land.png" width="1080" height="1920" />
    <splash density="port-ldpi" src="public/splash-land.png" width="1080" height="1920" />
    <splash density="port-mdpi" src="public/splash-land.png" width="1080" height="1920" />
    <splash density="port-xhdpi" src="public/splash-land.png" width="1080" height="1920" />
    <content src="index.html" />
    <preference name="Fullscreen" value="false" />
    <preference name="Orientation" value="portrait" />
    <preference name="AndroidInsecureFileModeEnabled" value="true" />
    <preference name="scheme" value="http" />
    <allow-intent href="*" />
    <access origin="*" subdomains="true" />
    <allow-navigation href="*" />
    <config-file parent="/manifest" target="AndroidManifest.xml" xmlns:android="http://schemas.android.com/apk/res/android">
      <uses-permission android:name="android.permission.INTERNET" />
    </config-file>
    <edit-config file="AndroidManifest.xml" mode="merge" target="application">
      <activity android:usesCleartextTraffic="true" />
    </edit-config>
    <chcp>
      <auto-download enabled="true" />
      <auto-install enabled="true" />
      <native-interface version="${appConfig.native_interface}" />
      <config-file url="${appConfig.url}chcp.json" />
    </chcp>
  </widget>`
}

const hcp_config = {
  dev: {
    url: 'http://192.183.8.149:8099/GZPHRM-APP/',      // 热更新地址
    name: 'app_dev',
    nameCN: '嘉德永丰开发版',                  // APP名称
    id: 'com.jadefortune.app_dev',       // APP id
    native_interface: 1                     // APP底层版本
  },
  testing: {
    url: 'http://192.183.8.240:8099/GZPHRM-APP/',      // 热更新地址
    name: 'app_testing',
    nameCN: '嘉德永丰测试版',
    id: 'com.jadefortune.app_testing',
    native_interface: 1
  },
  uat: {
    url: 'http://68.32.134.78:7099/GZPHRM-APP/',      // 热更新地址
    name: 'app_uat',
    nameCN: '嘉德永丰uat版',
    id: 'com.jadefortune.app_uat',
    native_interface: 1
  },
  production: {
    url: 'http://20.97.0.175/dwhxsys/GZPHRM-APP/',      // 热更新地址
    name: 'app',
    nameCN: '嘉德永丰',
    id: 'com.jadefortune.app',
    native_interface: 1
  }
}


// 写入文件
const createConfigFile = function () {
  const appConfig = hcp_config[PROJECT_ENV]
  if (appConfig) {
    fs.writeFileSync('cordova-hcp.json', getCordovaHcpJson(appConfig))
    fs.writeFileSync('config.xml', getConfigXML(appConfig))
    console.log('配置文件已生成\n')
  } else {
    console.log('配置文件生成失败，没有找到对应配置\n')
  }
}

try {
  createConfigFile()
} catch (e) {
  console.log(e)
}
